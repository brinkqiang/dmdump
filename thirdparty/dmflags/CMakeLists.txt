cmake_minimum_required(VERSION 2.8)

PROJECT(dmflags)

IF (WIN32)  
    MESSAGE(STATUS "Now is windows")

    SET(DMOS_NAME "win")

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )    
ELSEIF (APPLE)  
    MESSAGE(STATUS "Now is Apple systems")  

    SET(DMOS_NAME "mac") 

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )
ELSEIF (UNIX)  
    MESSAGE(STATUS "Now is UNIX-like OS")  
 
    SET(DMOS_NAME "lin") 
    
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )    
ENDIF ()

ADD_DEFINITIONS(-DGFLAGS_DLL_DECL=)

IF (WIN32)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/windows)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)

LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/lib)
    
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)

FILE(GLOB_RECURSE SOURCES 
${CMAKE_CURRENT_SOURCE_DIR}/src/gflags.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/gflags_reporting.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/gflags_completions.cc)

IF (WIN32)
    LIST(APPEND SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/windows/port.cc)
ENDIF(WIN32)

ADD_LIBRARY(dmflags ${SOURCES})

FILE(GLOB_RECURSE SOURCES 
${CMAKE_CURRENT_SOURCE_DIR}/test/main.cc)

ADD_EXECUTABLE(dmflagstest ${SOURCES})
TARGET_LINK_LIBRARIES(dmflagstest dmflags)
